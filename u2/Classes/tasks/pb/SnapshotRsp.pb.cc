// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SnapshotRsp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SnapshotRsp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_SnapshotRsp_2eproto() {
  delete SnapshotRsp::default_instance_;
  delete SnapshotRsp_MovableSnapshot::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_SnapshotRsp_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_SnapshotRsp_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_SnapshotRsp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SnapshotRsp::default_instance_ = new SnapshotRsp();
  SnapshotRsp_MovableSnapshot::default_instance_ = new SnapshotRsp_MovableSnapshot();
  SnapshotRsp::default_instance_->InitAsDefaultInstance();
  SnapshotRsp_MovableSnapshot::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SnapshotRsp_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SnapshotRsp_2eproto_once_);
void protobuf_AddDesc_SnapshotRsp_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SnapshotRsp_2eproto_once_,
                 &protobuf_AddDesc_SnapshotRsp_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SnapshotRsp_2eproto {
  StaticDescriptorInitializer_SnapshotRsp_2eproto() {
    protobuf_AddDesc_SnapshotRsp_2eproto();
  }
} static_descriptor_initializer_SnapshotRsp_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotRsp_MovableSnapshot::kUserIdFieldNumber;
const int SnapshotRsp_MovableSnapshot::kHeroIdFieldNumber;
const int SnapshotRsp_MovableSnapshot::kTypeFieldNumber;
const int SnapshotRsp_MovableSnapshot::kNicknameFieldNumber;
const int SnapshotRsp_MovableSnapshot::kHpFieldNumber;
const int SnapshotRsp_MovableSnapshot::kSpeedFieldNumber;
const int SnapshotRsp_MovableSnapshot::kEffDistanceFieldNumber;
const int SnapshotRsp_MovableSnapshot::kAliveFieldNumber;
const int SnapshotRsp_MovableSnapshot::kXFieldNumber;
const int SnapshotRsp_MovableSnapshot::kYFieldNumber;
const int SnapshotRsp_MovableSnapshot::kVxFieldNumber;
const int SnapshotRsp_MovableSnapshot::kVyFieldNumber;
const int SnapshotRsp_MovableSnapshot::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotRsp_MovableSnapshot::SnapshotRsp_MovableSnapshot()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SnapshotRsp.MovableSnapshot)
}

void SnapshotRsp_MovableSnapshot::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SnapshotRsp_MovableSnapshot::SnapshotRsp_MovableSnapshot(const SnapshotRsp_MovableSnapshot& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SnapshotRsp.MovableSnapshot)
}

void SnapshotRsp_MovableSnapshot::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  heroid_ = 0u;
  type_ = 0u;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hp_ = 0u;
  speed_ = 0;
  effdistance_ = 0;
  alive_ = false;
  x_ = 0;
  y_ = 0;
  vx_ = 0;
  vy_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
}

SnapshotRsp_MovableSnapshot::~SnapshotRsp_MovableSnapshot() {
  // @@protoc_insertion_point(destructor:SnapshotRsp.MovableSnapshot)
  SharedDtor();
}

void SnapshotRsp_MovableSnapshot::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SnapshotRsp_MovableSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SnapshotRsp_MovableSnapshot& SnapshotRsp_MovableSnapshot::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SnapshotRsp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SnapshotRsp_2eproto();
#endif
  return *default_instance_;
}

SnapshotRsp_MovableSnapshot* SnapshotRsp_MovableSnapshot::default_instance_ = NULL;

SnapshotRsp_MovableSnapshot* SnapshotRsp_MovableSnapshot::New(::google::protobuf::Arena* arena) const {
  SnapshotRsp_MovableSnapshot* n = new SnapshotRsp_MovableSnapshot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotRsp_MovableSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:SnapshotRsp.MovableSnapshot)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SnapshotRsp_MovableSnapshot, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SnapshotRsp_MovableSnapshot*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, type_);
  ZR_(hp_, alive_);
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(x_, timestamp_);

#undef ZR_HELPER_
#undef ZR_

}

bool SnapshotRsp_MovableSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SnapshotRsp.MovableSnapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 userId = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_heroId;
        break;
      }

      // optional fixed32 heroId = 2;
      case 2: {
        if (tag == 21) {
         parse_heroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &heroid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_type;
        break;
      }

      // optional fixed32 type = 3;
      case 3: {
        if (tag == 29) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional bytes nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_hp;
        break;
      }

      // optional fixed32 hp = 5;
      case 5: {
        if (tag == 45) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &hp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_speed;
        break;
      }

      // optional float speed = 6;
      case 6: {
        if (tag == 53) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_effDistance;
        break;
      }

      // optional float effDistance = 7;
      case 7: {
        if (tag == 61) {
         parse_effDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effdistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_alive;
        break;
      }

      // optional bool alive = 8;
      case 8: {
        if (tag == 64) {
         parse_alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alive_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_x;
        break;
      }

      // optional float x = 9;
      case 9: {
        if (tag == 77) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_y;
        break;
      }

      // optional float y = 10;
      case 10: {
        if (tag == 85) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_vx;
        break;
      }

      // optional float vx = 11;
      case 11: {
        if (tag == 93) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_vy;
        break;
      }

      // optional float vy = 12;
      case 12: {
        if (tag == 101) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_timestamp;
        break;
      }

      // optional fixed64 timestamp = 13;
      case 13: {
        if (tag == 105) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SnapshotRsp.MovableSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SnapshotRsp.MovableSnapshot)
  return false;
#undef DO_
}

void SnapshotRsp_MovableSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SnapshotRsp.MovableSnapshot)
  // optional fixed64 userId = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }

  // optional fixed32 heroId = 2;
  if (this->heroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->heroid(), output);
  }

  // optional fixed32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->type(), output);
  }

  // optional bytes nickname = 4;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->nickname(), output);
  }

  // optional fixed32 hp = 5;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->hp(), output);
  }

  // optional float speed = 6;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speed(), output);
  }

  // optional float effDistance = 7;
  if (this->effdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->effdistance(), output);
  }

  // optional bool alive = 8;
  if (this->alive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->alive(), output);
  }

  // optional float x = 9;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->x(), output);
  }

  // optional float y = 10;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->y(), output);
  }

  // optional float vx = 11;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->vx(), output);
  }

  // optional float vy = 12;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->vy(), output);
  }

  // optional fixed64 timestamp = 13;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:SnapshotRsp.MovableSnapshot)
}

int SnapshotRsp_MovableSnapshot::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SnapshotRsp.MovableSnapshot)
  int total_size = 0;

  // optional fixed64 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 + 8;
  }

  // optional fixed32 heroId = 2;
  if (this->heroid() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 type = 3;
  if (this->type() != 0) {
    total_size += 1 + 4;
  }

  // optional bytes nickname = 4;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nickname());
  }

  // optional fixed32 hp = 5;
  if (this->hp() != 0) {
    total_size += 1 + 4;
  }

  // optional float speed = 6;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // optional float effDistance = 7;
  if (this->effdistance() != 0) {
    total_size += 1 + 4;
  }

  // optional bool alive = 8;
  if (this->alive() != 0) {
    total_size += 1 + 1;
  }

  // optional float x = 9;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 10;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float vx = 11;
  if (this->vx() != 0) {
    total_size += 1 + 4;
  }

  // optional float vy = 12;
  if (this->vy() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed64 timestamp = 13;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotRsp_MovableSnapshot::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SnapshotRsp_MovableSnapshot*>(&from));
}

void SnapshotRsp_MovableSnapshot::MergeFrom(const SnapshotRsp_MovableSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SnapshotRsp.MovableSnapshot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.heroid() != 0) {
    set_heroid(from.heroid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.effdistance() != 0) {
    set_effdistance(from.effdistance());
  }
  if (from.alive() != 0) {
    set_alive(from.alive());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void SnapshotRsp_MovableSnapshot::CopyFrom(const SnapshotRsp_MovableSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnapshotRsp.MovableSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRsp_MovableSnapshot::IsInitialized() const {

  return true;
}

void SnapshotRsp_MovableSnapshot::Swap(SnapshotRsp_MovableSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotRsp_MovableSnapshot::InternalSwap(SnapshotRsp_MovableSnapshot* other) {
  std::swap(userid_, other->userid_);
  std::swap(heroid_, other->heroid_);
  std::swap(type_, other->type_);
  nickname_.Swap(&other->nickname_);
  std::swap(hp_, other->hp_);
  std::swap(speed_, other->speed_);
  std::swap(effdistance_, other->effdistance_);
  std::swap(alive_, other->alive_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(vx_, other->vx_);
  std::swap(vy_, other->vy_);
  std::swap(timestamp_, other->timestamp_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SnapshotRsp_MovableSnapshot::GetTypeName() const {
  return "SnapshotRsp.MovableSnapshot";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotRsp::kTaskIdFieldNumber;
const int SnapshotRsp::kVersionFieldNumber;
const int SnapshotRsp::kCodeFieldNumber;
const int SnapshotRsp::kSnapshotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotRsp::SnapshotRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SnapshotRsp)
}

void SnapshotRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SnapshotRsp::SnapshotRsp(const SnapshotRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SnapshotRsp)
}

void SnapshotRsp::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

SnapshotRsp::~SnapshotRsp() {
  // @@protoc_insertion_point(destructor:SnapshotRsp)
  SharedDtor();
}

void SnapshotRsp::SharedDtor() {
  taskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SnapshotRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SnapshotRsp& SnapshotRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SnapshotRsp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SnapshotRsp_2eproto();
#endif
  return *default_instance_;
}

SnapshotRsp* SnapshotRsp::default_instance_ = NULL;

SnapshotRsp* SnapshotRsp::New(::google::protobuf::Arena* arena) const {
  SnapshotRsp* n = new SnapshotRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SnapshotRsp)
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  snapshots_.Clear();
}

bool SnapshotRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SnapshotRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string taskId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SnapshotRsp.taskId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SnapshotRsp.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // optional int32 code = 3;
      case 3: {
        if (tag == 24) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_snapshots;
        break;
      }

      // repeated .SnapshotRsp.MovableSnapshot snapshots = 4;
      case 4: {
        if (tag == 34) {
         parse_snapshots:
          DO_(input->IncrementRecursionDepth());
         parse_loop_snapshots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_snapshots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_snapshots;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SnapshotRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SnapshotRsp)
  return false;
#undef DO_
}

void SnapshotRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SnapshotRsp)
  // optional string taskId = 1;
  if (this->taskid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SnapshotRsp.taskId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->taskid(), output);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SnapshotRsp.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional int32 code = 3;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  // repeated .SnapshotRsp.MovableSnapshot snapshots = 4;
  for (unsigned int i = 0, n = this->snapshots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->snapshots(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SnapshotRsp)
}

int SnapshotRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SnapshotRsp)
  int total_size = 0;

  // optional string taskId = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taskid());
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // repeated .SnapshotRsp.MovableSnapshot snapshots = 4;
  total_size += 1 * this->snapshots_size();
  for (int i = 0; i < this->snapshots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->snapshots(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SnapshotRsp*>(&from));
}

void SnapshotRsp::MergeFrom(const SnapshotRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SnapshotRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  snapshots_.MergeFrom(from.snapshots_);
  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void SnapshotRsp::CopyFrom(const SnapshotRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnapshotRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRsp::IsInitialized() const {

  return true;
}

void SnapshotRsp::Swap(SnapshotRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotRsp::InternalSwap(SnapshotRsp* other) {
  taskid_.Swap(&other->taskid_);
  version_.Swap(&other->version_);
  std::swap(code_, other->code_);
  snapshots_.UnsafeArenaSwap(&other->snapshots_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SnapshotRsp::GetTypeName() const {
  return "SnapshotRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotRsp_MovableSnapshot

// optional fixed64 userId = 1;
void SnapshotRsp_MovableSnapshot::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SnapshotRsp_MovableSnapshot::userid() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.userId)
  return userid_;
}
 void SnapshotRsp_MovableSnapshot::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.userId)
}

// optional fixed32 heroId = 2;
void SnapshotRsp_MovableSnapshot::clear_heroid() {
  heroid_ = 0u;
}
 ::google::protobuf::uint32 SnapshotRsp_MovableSnapshot::heroid() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.heroId)
  return heroid_;
}
 void SnapshotRsp_MovableSnapshot::set_heroid(::google::protobuf::uint32 value) {
  
  heroid_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.heroId)
}

// optional fixed32 type = 3;
void SnapshotRsp_MovableSnapshot::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 SnapshotRsp_MovableSnapshot::type() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.type)
  return type_;
}
 void SnapshotRsp_MovableSnapshot::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.type)
}

// optional bytes nickname = 4;
void SnapshotRsp_MovableSnapshot::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SnapshotRsp_MovableSnapshot::nickname() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnapshotRsp_MovableSnapshot::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.nickname)
}
 void SnapshotRsp_MovableSnapshot::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SnapshotRsp.MovableSnapshot.nickname)
}
 void SnapshotRsp_MovableSnapshot::set_nickname(const void* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SnapshotRsp.MovableSnapshot.nickname)
}
 ::std::string* SnapshotRsp_MovableSnapshot::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:SnapshotRsp.MovableSnapshot.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SnapshotRsp_MovableSnapshot::release_nickname() {
  // @@protoc_insertion_point(field_release:SnapshotRsp.MovableSnapshot.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnapshotRsp_MovableSnapshot::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:SnapshotRsp.MovableSnapshot.nickname)
}

// optional fixed32 hp = 5;
void SnapshotRsp_MovableSnapshot::clear_hp() {
  hp_ = 0u;
}
 ::google::protobuf::uint32 SnapshotRsp_MovableSnapshot::hp() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.hp)
  return hp_;
}
 void SnapshotRsp_MovableSnapshot::set_hp(::google::protobuf::uint32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.hp)
}

// optional float speed = 6;
void SnapshotRsp_MovableSnapshot::clear_speed() {
  speed_ = 0;
}
 float SnapshotRsp_MovableSnapshot::speed() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.speed)
  return speed_;
}
 void SnapshotRsp_MovableSnapshot::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.speed)
}

// optional float effDistance = 7;
void SnapshotRsp_MovableSnapshot::clear_effdistance() {
  effdistance_ = 0;
}
 float SnapshotRsp_MovableSnapshot::effdistance() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.effDistance)
  return effdistance_;
}
 void SnapshotRsp_MovableSnapshot::set_effdistance(float value) {
  
  effdistance_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.effDistance)
}

// optional bool alive = 8;
void SnapshotRsp_MovableSnapshot::clear_alive() {
  alive_ = false;
}
 bool SnapshotRsp_MovableSnapshot::alive() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.alive)
  return alive_;
}
 void SnapshotRsp_MovableSnapshot::set_alive(bool value) {
  
  alive_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.alive)
}

// optional float x = 9;
void SnapshotRsp_MovableSnapshot::clear_x() {
  x_ = 0;
}
 float SnapshotRsp_MovableSnapshot::x() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.x)
  return x_;
}
 void SnapshotRsp_MovableSnapshot::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.x)
}

// optional float y = 10;
void SnapshotRsp_MovableSnapshot::clear_y() {
  y_ = 0;
}
 float SnapshotRsp_MovableSnapshot::y() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.y)
  return y_;
}
 void SnapshotRsp_MovableSnapshot::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.y)
}

// optional float vx = 11;
void SnapshotRsp_MovableSnapshot::clear_vx() {
  vx_ = 0;
}
 float SnapshotRsp_MovableSnapshot::vx() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.vx)
  return vx_;
}
 void SnapshotRsp_MovableSnapshot::set_vx(float value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.vx)
}

// optional float vy = 12;
void SnapshotRsp_MovableSnapshot::clear_vy() {
  vy_ = 0;
}
 float SnapshotRsp_MovableSnapshot::vy() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.vy)
  return vy_;
}
 void SnapshotRsp_MovableSnapshot::set_vy(float value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.vy)
}

// optional fixed64 timestamp = 13;
void SnapshotRsp_MovableSnapshot::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SnapshotRsp_MovableSnapshot::timestamp() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.MovableSnapshot.timestamp)
  return timestamp_;
}
 void SnapshotRsp_MovableSnapshot::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.MovableSnapshot.timestamp)
}

// -------------------------------------------------------------------

// SnapshotRsp

// optional string taskId = 1;
void SnapshotRsp::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SnapshotRsp::taskid() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.taskId)
  return taskid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnapshotRsp::set_taskid(const ::std::string& value) {
  
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SnapshotRsp.taskId)
}
 void SnapshotRsp::set_taskid(const char* value) {
  
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SnapshotRsp.taskId)
}
 void SnapshotRsp::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SnapshotRsp.taskId)
}
 ::std::string* SnapshotRsp::mutable_taskid() {
  
  // @@protoc_insertion_point(field_mutable:SnapshotRsp.taskId)
  return taskid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SnapshotRsp::release_taskid() {
  // @@protoc_insertion_point(field_release:SnapshotRsp.taskId)
  
  return taskid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnapshotRsp::set_allocated_taskid(::std::string* taskid) {
  if (taskid != NULL) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:SnapshotRsp.taskId)
}

// optional string version = 2;
void SnapshotRsp::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SnapshotRsp::version() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnapshotRsp::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SnapshotRsp.version)
}
 void SnapshotRsp::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SnapshotRsp.version)
}
 void SnapshotRsp::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SnapshotRsp.version)
}
 ::std::string* SnapshotRsp::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:SnapshotRsp.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SnapshotRsp::release_version() {
  // @@protoc_insertion_point(field_release:SnapshotRsp.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SnapshotRsp::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:SnapshotRsp.version)
}

// optional int32 code = 3;
void SnapshotRsp::clear_code() {
  code_ = 0;
}
 ::google::protobuf::int32 SnapshotRsp::code() const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.code)
  return code_;
}
 void SnapshotRsp::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:SnapshotRsp.code)
}

// repeated .SnapshotRsp.MovableSnapshot snapshots = 4;
int SnapshotRsp::snapshots_size() const {
  return snapshots_.size();
}
void SnapshotRsp::clear_snapshots() {
  snapshots_.Clear();
}
const ::SnapshotRsp_MovableSnapshot& SnapshotRsp::snapshots(int index) const {
  // @@protoc_insertion_point(field_get:SnapshotRsp.snapshots)
  return snapshots_.Get(index);
}
::SnapshotRsp_MovableSnapshot* SnapshotRsp::mutable_snapshots(int index) {
  // @@protoc_insertion_point(field_mutable:SnapshotRsp.snapshots)
  return snapshots_.Mutable(index);
}
::SnapshotRsp_MovableSnapshot* SnapshotRsp::add_snapshots() {
  // @@protoc_insertion_point(field_add:SnapshotRsp.snapshots)
  return snapshots_.Add();
}
::google::protobuf::RepeatedPtrField< ::SnapshotRsp_MovableSnapshot >*
SnapshotRsp::mutable_snapshots() {
  // @@protoc_insertion_point(field_mutable_list:SnapshotRsp.snapshots)
  return &snapshots_;
}
const ::google::protobuf::RepeatedPtrField< ::SnapshotRsp_MovableSnapshot >&
SnapshotRsp::snapshots() const {
  // @@protoc_insertion_point(field_list:SnapshotRsp.snapshots)
  return snapshots_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
